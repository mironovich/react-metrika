{"version":3,"sources":["api/metrika.js","App.js","registerServiceWorker.js","index.js"],"names":["require","ym","auth","process","REACT_APP_ID","token","headers","Headers","Content-Type","fetch","then","response","json","data","console","log","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","exec","document","location","hash","setState","react_default","a","createElement","className","href","getData","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","getElementById","URL","origin","addEventListener","concat","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+NACAA,EAAQ,QCGFC,EAAK,qDDCTC,KACE,mEAGAC,4DAAYC,aASZ,qEAEMC,GACN,IAGMC,EAAU,IAAIC,QAAQ,CAC1BC,eAAgB,sCAOlBC,MAHE,gHACAJ,EAEa,CAIbC,QAASA,IAERI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIC,QAAQC,IAAIF,eCVjBG,cAtBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,mFAKjB,IAAIb,EAAQ,uBAAuBqB,KAAKC,SAASC,SAASC,OAC1DxB,EAAQA,GAASA,EAAM,KACdgB,KAAKS,SAAS,CAAEzB,2CAGzB,OACE0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,2GACoBH,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACxBF,EAAAC,EAAAC,cAAA,KAAGE,KAAMlC,EAAGC,MAAZ,SACCmB,KAAKI,MAAMpB,OAASJ,EAAGmC,QAAQf,KAAKI,MAAMpB,gBAhBnCgC,aCIZC,EAAcC,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTlC,KAAK,SAAAsC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzB,QACfoB,UAAUC,cAAcO,WAK1BvC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBuC,MAAM,SAAAC,GACLzC,QAAQyC,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAAS/B,SAASgC,eAAe,SDclC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIzD,iBAAwBqC,OAAOZ,UAC3CiC,SAAWrB,OAAOZ,SAASiC,OAIvC,OAGFrB,OAAOsB,iBAAiB,OAAQ,WAC9B,IAAMlB,EAAK,GAAAmB,OAAM5D,iBAAN,sBAEPmC,GAiDV,SAAiCM,GAE/BnC,MAAMmC,GACHlC,KAAK,SAAAC,GAGkB,MAApBA,EAASqD,SACuD,IAAhErD,EAASL,QAAQ2D,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAMzD,KAAK,SAAAsC,GACjCA,EAAaoB,aAAa1D,KAAK,WAC7B8B,OAAOZ,SAASyC,aAKpB1B,EAAgBC,KAGnBU,MAAM,WACLxC,QAAQC,IACN,mEArEAuD,CAAwB1B,GAIxBC,UAAUC,cAAcqB,MAAMzD,KAAK,WACjCI,QAAQC,IACN,+GAMJ4B,EAAgBC,MCzCxB2B","file":"static/js/main.8a66ba17.chunk.js","sourcesContent":["// const config = require('../constants/.config.json')\nrequire('isomorphic-fetch')\n// console.log(process.env)\n\nclass Metrika {\n  auth =\n    'https://oauth.yandex.ru/authorize?' +\n    'response_type=token' +\n    '&client_id=' +\n    process.env.REACT_APP_ID +\n    // [& device_id=<идентификатор устройства>]\n    // [& device_name=<имя устройства>]\n    // [& redirect_uri=<адрес перенаправления>]\n    // [& login_hint=<имя пользователя или электронный адрес>]\n    // [& scope=<запрашиваемые необходимые права>]\n    // [& optional_scope=<запрашиваемые опциональные права>]\n    // [& force_confirm=yes]\n    // [& state=<произвольная строка>]\n    '&display=popup'\n\n  getData(token) {\n    let request =\n      'https://api-metrika.yandex.ru/management/v1/counter/41649664/logrequests/evaluate?date1=2016%2D01%2D01&date2=2016%2D01%2D31&fields=ym%3Apv%3AdateTime%2Cym%3Apv%3Areferer&source=hits&oauth_token=' +\n      token\n    const headers = new Headers({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    })\n\n    request =\n      'http://api-metrika.yandex.ru/stat/traffic/summary.json?id=41649664&date1=20180505&date2=20180505&oauth_token=' +\n      token\n\n    fetch(request, {\n      // method: 'POST',\n      // credentials: 'include',\n      // mode: 'no-cors',\n      headers: headers,\n    })\n      .then(response => response.json())\n      .then(data => console.log(data))\n  }\n}\n\nexport default Metrika\n","import React, { Component } from 'react'\nimport './App.css'\nimport Metrika from './api/metrika'\n\nconst ym = new Metrika()\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n  componentDidMount() {\n    let token = /access_token=([^&]+)/.exec(document.location.hash)\n    token = token && token[1]\n    token && this.setState({ token })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"App-intro\">\n         Антон меняет пароли<br /><br />\n          <a href={ym.auth}> AUTH</a>\n          {this.state.token && ym.getData(this.state.token)}\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}